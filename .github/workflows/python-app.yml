name: Python CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]
        exclude:
          # Exclure Python 3.8 sur Windows en raison de problèmes de compatibilité avec certaines dépendances
          - os: windows-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            python3-dev \
            xvfb \
            libgl1-mesa-glx \
            libxcb-xinerama0 \
            libxcb-cursor0
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install pkg-config
        brew install libxcb
        brew install xquartz

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with coverage
      if: runner.os != 'Windows'  # Les tests avec couverture ne fonctionnent pas bien sur Windows
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          xvfb-run -a python -m pytest -v --cov=smartcalc --cov-report=xml
        else
          python -m pytest -v --cov=smartcalc --cov-report=xml
        fi
      env:
        QT_QUICK_BACKEND: software
        LIBGL_ALWAYS_SOFTWARE: 1
    
    - name: Run tests without coverage (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pytest -v
      env:
        QT_DEBUG_PLUGINS: 1
        QT_QPA_PLATFORM: windows
    
    - name: Upload coverage to Codecov
      if: runner.os != 'Windows' && github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and type check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run black
      run: black --check .
    
    - name: Run flake8
      run: flake8 .
    
    - name: Run mypy
      run: mypy .
    
    - name: Run pylint
      run: pylint smartcalc tests

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for known security vulnerabilities
      run: safety check --full-report
    
    - name: Run bandit security linter
      run: bandit -r smartcalc -c pyproject.toml

  build:
    name: Build package
    needs: [test, lint, security]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Verify package
      run: |
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/*
        retention-days: 5
