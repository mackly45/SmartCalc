name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        echo "=== Installing System Dependencies ==="
        sudo apt-get update
        sudo apt-get install -y \
            python3-pip \
            python3-dev \
            xvfb \
            libgl1 \
            libglx0 \
            libopengl0 \
            libegl1 \
            libgl1-mesa-dri \
            libgles2 \
            libglu1-mesa \
            libxcb-xinerama0 \
            libxcb-cursor0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxcb-xfixes0 \
            libxcb-xkb1 \
            libxcb-util1 \
            libxkbcommon-x11-0
    
    - name: Install PyQt6 and dependencies
      run: |
        echo "=== Installing PyQt6 ==="
        python -m pip install --upgrade pip
        pip install PyQt6 PyQt6-Qt6 PyQt6-sip
        pip install -r requirements.txt
    
    - name: Verify PyQt6 installation
      run: |
        echo "=== Verifying PyQt6 Installation ==="
        python -c "from PyQt6.QtCore import QT_VERSION_STR; print(f'PyQt6 Qt version: {QT_VERSION_STR}')"
    
    - name: Install package in development mode
      run: |
        echo "=== Installing package in development mode ==="
        pip install -e .
    
    - name: Run basic tests with offscreen plugin
      run: |
        echo "=== Running Basic Tests with Offscreen Plugin ==="
        # Créer un script Python temporaire
        echo 'import os' > test_offscreen.py
        echo 'import sys' >> test_offscreen.py
        echo 'from PyQt6.QtWidgets import QApplication' >> test_offscreen.py
        echo 'from PyQt6.QtCore import QT_VERSION_STR, QLibraryInfo, QCoreApplication, Qt' >> test_offscreen.py
        echo 'def run_tests():' >> test_offscreen.py
        echo '    print("=== Environment Variables ===")' >> test_offscreen.py
        echo '    for key in ["QT_QPA_PLATFORM", "QT_QUICK_BACKEND", "LIBGL_ALWAYS_SOFTWARE"]:' >> test_offscreen.py
        echo '        print(f"{key} = {os.environ.get(key)}")' >> test_offscreen.py
        echo '    print("\n=== Testing PyQt6 Import ===")' >> test_offscreen.py
        echo '    print(f"PyQt6 Qt version: {QT_VERSION_STR}")' >> test_offscreen.py
        echo '    print("Qt plugins path:", QLibraryInfo.path(QLibraryInfo.LibraryPath.PluginsPath))' >> test_offscreen.py
        echo '    QCoreApplication.setAttribute(Qt.ApplicationAttribute.AA_ShareOpenGLContexts)' >> test_offscreen.py
        echo '    app = QApplication([])' >> test_offscreen.py
        echo '    print("Success: PyQt6 QApplication created with offscreen plugin")' >> test_offscreen.py
        echo '    try:' >> test_offscreen.py
        echo '        from smartcalc.controllers.calculator_controller import CalculatorController' >> test_offscreen.py
        echo '        from smartcalc.models.calculator_model import CalculatorModel' >> test_offscreen.py
        echo '        from smartcalc.views.calculator_view import CalculatorView' >> test_offscreen.py
        echo '        print("Success: All main components imported successfully")' >> test_offscreen.py
        echo '        model = CalculatorModel()' >> test_offscreen.py
        echo '        model.current_value = "5"' >> test_offscreen.py
        echo '        model.add_operator("+")' >> test_offscreen.py
        echo '        model.append_number("3")' >> test_offscreen.py
        echo '        model.calculate()' >> test_offscreen.py
        echo '        print(f"Test calculation: 5 + 3 = {model.current_value}")' >> test_offscreen.py
        echo '        return 0' >> test_offscreen.py
        echo '    except Exception as e:' >> test_offscreen.py
        echo '        print(f"Error: {str(e)}")' >> test_offscreen.py
        echo '        import traceback' >> test_offscreen.py
        echo '        traceback.print_exc()' >> test_offscreen.py
        echo '        return 1' >> test_offscreen.py
        echo '    finally:' >> test_offscreen.py
        echo '        app.quit()' >> test_offscreen.py
        echo 'if __name__ == "__main__":' >> test_offscreen.py
        echo '    sys.exit(run_tests())' >> test_offscreen.py

        # Configurer l'environnement et exécuter le test
        export QT_DEBUG_PLUGINS=1
        export QT_QUICK_BACKEND=software
        export LIBGL_ALWAYS_SOFTWARE=1
        python test_offscreen.py
    
    - name: Run pytest with offscreen plugin
      run: |
        echo "=== Running pytest with offscreen plugin ==="
        export QT_QPA_PLATFORM=offscreen
        export QT_QUICK_BACKEND=software
        export LIBGL_ALWAYS_SOFTWARE=1
        pip install pytest pytest-qt
        python -m pytest tests/ -v
